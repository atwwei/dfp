import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { Subject, timer } from 'rxjs';
import { buffer, filter, map, switchMap } from 'rxjs/operators';
import { GPT_SOURCE, DELAY_TIME } from './consts';
import { ImpressionViewableEvent, SlotOnloadEvent, SlotRenderEndedEvent, SlotRequestedEvent, SlotResponseReceived, SlotVisibilityChangedEvent, } from './events';
import { DfpAdDisplay, DfpAdRefresh } from './actions';
import * as i0 from "@angular/core";
export class DfpService {
    constructor(platformId, document) {
        this.platformId = platformId;
        this.document = document;
        this.$queue = new Subject();
        this.$events = new Subject();
        if (isPlatformBrowser(this.platformId)) {
            this.initializeGPT();
            this.startActionQueue();
            this.addEventListeners();
        }
    }
    get events() {
        return this.$events.asObservable();
    }
    initializeGPT() {
        this.appendScript({ async: true, src: GPT_SOURCE });
        window.googletag = window.googletag || { cmd: [] };
    }
    startActionQueue() {
        const displaySlots = [];
        this.$queue
            .pipe(filter((act) => {
            if (act instanceof DfpAdDisplay) {
                displaySlots.push(act.slot);
                return false;
            }
            return (act instanceof DfpAdRefresh && displaySlots.indexOf(act.slot) === -1);
        }), map((act) => act.slot), buffer(this.$queue.pipe(switchMap(() => timer(DELAY_TIME * 2)))))
            .subscribe((refreshSlots) => {
            displaySlots.forEach((slot) => {
                googletag.display(slot);
            });
            displaySlots.splice(0);
            if (refreshSlots.length > 0) {
                googletag.pubads().refresh(refreshSlots);
            }
        });
    }
    addEventListeners() {
        googletag.cmd.push(() => {
            const pubads = googletag.pubads();
            pubads.addEventListener('impressionViewable', (event) => {
                this.$events.next(new ImpressionViewableEvent(event));
            });
            pubads.addEventListener('slotOnload', (event) => {
                this.$events.next(new SlotOnloadEvent(event));
            });
            pubads.addEventListener('slotRenderEnded', (event) => {
                this.$events.next(new SlotRenderEndedEvent(event));
            });
            pubads.addEventListener('slotRequested', (event) => {
                this.$events.next(new SlotRequestedEvent(event));
            });
            pubads.addEventListener('slotResponseReceived', (event) => {
                this.$events.next(new SlotResponseReceived(event));
            });
            pubads.addEventListener('slotVisibilityChanged', (event) => {
                this.$events.next(new SlotVisibilityChangedEvent(event));
            });
        });
    }
    clear(elementIds) {
        this.cmd(() => {
            googletag.pubads().clear(this.getSlots(elementIds));
        });
    }
    cmd(callback) {
        if (isPlatformBrowser(this.platformId)) {
            googletag.cmd.push(callback);
        }
    }
    destroySlots(elementIds) {
        this.cmd(() => {
            googletag.destroySlots(this.getSlots(elementIds));
        });
    }
    getSlots(elementIds) {
        let slots = undefined;
        if (isPlatformBrowser(this.platformId)) {
            if (googletag.apiReady && elementIds) {
                return googletag
                    .pubads()
                    .getSlots()
                    .filter((slot) => {
                    return elementIds.indexOf(slot.getSlotElementId()) !== -1;
                });
            }
        }
        return slots;
    }
    refresh(elementIds, opt_options) {
        this.cmd(() => {
            googletag.pubads().refresh(this.getSlots(elementIds), opt_options);
        });
    }
    queue(event) {
        this.$queue.next(event);
    }
    /**
     * Append Script tag to parentNode
     * @param options
     * @param parentNode The default setting is document.head
     * @returns
     */
    appendScript(options, parentNode) {
        parentNode = parentNode || this.document.head;
        const oldScript = options.id
            ? parentNode.querySelector('#' + options.id)
            : null;
        const script = this.document.createElement('script');
        Object.assign(script, options, {
            type: 'text/javascript',
        });
        if (oldScript) {
            parentNode.replaceChild(script, oldScript);
        }
        else {
            this.appendText('\n', parentNode);
            parentNode.appendChild(script);
            this.appendText('\n', parentNode);
        }
        return script;
    }
    appendText(data, parentNode) {
        parentNode = parentNode || this.document.head;
        const text = this.document.createTextNode(data);
        parentNode.appendChild(text);
        return text;
    }
}
DfpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.1", ngImport: i0, type: DfpService, deps: [{ token: PLATFORM_ID }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
DfpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.1", ngImport: i0, type: DfpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.1", ngImport: i0, type: DfpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,
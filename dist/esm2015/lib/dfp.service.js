import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { Subject, timer } from 'rxjs';
import { buffer, switchMap } from 'rxjs/operators';
import { GPT_SOURCE, DELAY_TIME } from './consts';
import { ImpressionViewableEvent, SlotOnloadEvent, SlotRenderEndedEvent, SlotRequestedEvent, SlotResponseReceived, SlotVisibilityChangedEvent, } from './events';
import { DisplaySlot, RefreshSlot } from './actions';
import * as i0 from "@angular/core";
export class DfpService {
    constructor(platformId, document) {
        this.platformId = platformId;
        this.document = document;
        this.$singleRequest = new Subject();
        this.$events = new Subject();
        if (isPlatformBrowser(this.platformId)) {
            this.init();
        }
    }
    get events() {
        return this.$events.asObservable();
    }
    init() {
        // GPT
        if (!window.googletag) {
            this.appendScript({ async: true, src: GPT_SOURCE });
            window.googletag = window.googletag || { cmd: [] };
        }
        // Single Request Queue
        this.$singleRequest
            .pipe(buffer(this.$singleRequest.pipe(switchMap(() => timer(DELAY_TIME * 2)))))
            .subscribe((acts) => {
            acts.forEach((act) => {
                if (act instanceof DisplaySlot) {
                    googletag.display(act.slot);
                }
                else if (act instanceof RefreshSlot) {
                    googletag.pubads().refresh([act.slot], { changeCorrelator: false });
                }
            });
        });
        // Event Listeners
        googletag.cmd.push(() => {
            const pubads = googletag.pubads();
            pubads.addEventListener('impressionViewable', (event) => {
                this.$events.next(new ImpressionViewableEvent(event));
            });
            pubads.addEventListener('slotOnload', (event) => {
                this.$events.next(new SlotOnloadEvent(event));
            });
            pubads.addEventListener('slotRenderEnded', (event) => {
                this.$events.next(new SlotRenderEndedEvent(event));
            });
            pubads.addEventListener('slotRequested', (event) => {
                this.$events.next(new SlotRequestedEvent(event));
            });
            pubads.addEventListener('slotResponseReceived', (event) => {
                this.$events.next(new SlotResponseReceived(event));
            });
            pubads.addEventListener('slotVisibilityChanged', (event) => {
                this.$events.next(new SlotVisibilityChangedEvent(event));
            });
        });
    }
    define(ad) {
        let slot;
        let id = ad.id || '';
        if (id) {
            const slotExists = this.getSlot(id);
            if ((slotExists === null || slotExists === void 0 ? void 0 : slotExists.getAdUnitPath()) === ad.unitPath) {
                slot = slotExists;
            }
            else if (slotExists) {
                this.destroy(slotExists);
            }
        }
        if (!slot) {
            if (ad.size) {
                slot = googletag.defineSlot(ad.unitPath, ad.size, id);
            }
            else {
                slot = googletag.defineOutOfPageSlot(ad.unitPath, id);
            }
            if (!slot) {
                return;
            }
        }
        if (ad.size && ad.content) {
            slot.addService(googletag.content());
            googletag.enableServices();
            googletag.content().setContent(slot, ad.content);
        }
        else {
            if (ad.sizeMapping) {
                slot.defineSizeMapping(ad.sizeMapping);
            }
            slot.clearCategoryExclusions();
            if (ad.categoryExclusion) {
                if (ad.categoryExclusion instanceof Array) {
                    ad.categoryExclusion.forEach((cat) => slot === null || slot === void 0 ? void 0 : slot.setCategoryExclusion(cat));
                }
                else {
                    slot.setCategoryExclusion(ad.categoryExclusion);
                }
            }
            if (typeof ad.forceSafeFrame === 'boolean') {
                slot.setForceSafeFrame(ad.forceSafeFrame);
            }
            if (ad.safeFrameConfig) {
                slot.setSafeFrameConfig(ad.safeFrameConfig);
            }
            slot.clearTargeting();
            if (ad.targeting) {
                slot.updateTargetingFromMap(ad.targeting);
            }
            if (ad.collapseEmptyDiv instanceof Array) {
                slot.setCollapseEmptyDiv(ad.collapseEmptyDiv[0], ad.collapseEmptyDiv[1]);
            }
            else if (typeof ad.collapseEmptyDiv === 'boolean') {
                slot.setCollapseEmptyDiv(ad.collapseEmptyDiv);
            }
            if (ad.clickUrl) {
                slot.setClickUrl(ad.clickUrl);
            }
            if (ad.adsense) {
                for (const key in ad.adsense) {
                    slot.set(key, ad.adsense[key]);
                }
            }
            slot.addService(googletag.pubads());
            googletag.enableServices();
        }
        return slot;
    }
    display(slot) {
        if (googletag.pubads().isSRA()) {
            this.$singleRequest.next(new DisplaySlot(slot));
        }
        else {
            googletag.display(slot);
        }
    }
    refresh(slot) {
        if (googletag.pubads().isSRA()) {
            this.$singleRequest.next(new RefreshSlot(slot));
        }
        else {
            googletag.pubads().refresh([slot]);
        }
    }
    destroy(slot) {
        googletag.destroySlots([slot]);
    }
    /**
     * Get the slot by element id
     * @param elementId the slot element id
     * @returns
     */
    getSlot(elementId) {
        return this.getSlots().find((slot) => elementId === slot.getSlotElementId());
    }
    /**
     * Get the list of slots associated with this service.
     * @param elementIds the slot element id array.
     * @returns
     */
    getSlots(elementIds) {
        let slots = googletag.pubads().getSlots();
        if (typeof elementIds !== 'undefined') {
            slots = slots.filter((slot) => elementIds.indexOf(slot.getSlotElementId()) != -1);
        }
        return slots;
    }
    /**
     * Use googletag.cmd.push() to execute the callback function.
     * @param callback
     */
    cmd(callback) {
        if (isPlatformBrowser(this.platformId)) {
            googletag.cmd.push(callback);
        }
    }
    appendScript(options, parentNode) {
        parentNode = parentNode || this.document.head;
        const oldScript = options.id
            ? parentNode.querySelector('#' + options.id)
            : null;
        const script = this.document.createElement('script');
        Object.assign(script, options, { type: 'text/javascript' });
        if (oldScript) {
            parentNode.replaceChild(script, oldScript);
        }
        else {
            this.appendText('\n', parentNode);
            parentNode.appendChild(script);
            this.appendText('\n', parentNode);
        }
        return script;
    }
    appendText(data, parentNode) {
        parentNode = parentNode || this.document.head;
        const text = this.document.createTextNode(data);
        parentNode.appendChild(text);
        return text;
    }
}
DfpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.1", ngImport: i0, type: DfpService, deps: [{ token: PLATFORM_ID }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });
DfpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.1", ngImport: i0, type: DfpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.1", ngImport: i0, type: DfpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,